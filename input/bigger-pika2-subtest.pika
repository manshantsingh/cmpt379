exec {
	const arrBig:= new [[int]](10).
	arrBig[0]:= new [int](10).
	arrBig[1]:= new [int](3).
	const arr := arrBig[0].
	arr[0] := 5.
	print arr[0];arr[1],_n_.
	arr[1] := 2.

	arrBig[0][0]:= 0.

	print arr[0];arr[1],_n_.
	print arrBig[0][7];arrBig[0][1],_n_.
	print ![arr[0]|bool] || [arr[100]|bool],_n_.
	print "cast to targetable check (should not cause compile/runtime error):";[arr|[int]][0],_n_.

	var brr := clone arr.
	print "should be true: ", length brr == length arr, _n_.
	brr[1] := 10.
	print arr[0] ; brr[0] , _n_.
	print "should be false: ", brr == arr, _n_.
	while(brr[1]>0){
		print "before: ", brr[1], ^,^.
		brr[1] := brr[1] - 1.
		print _t_, "after: ", brr[1].

		if(brr[1] == (brr[1]/3)*3) {
			print _t_, "this is divisible by 3", _t_.

			if(brr[1] == (brr[1]/2)*2){
				print "and".
			}
			else{
				print "but not".
			}
			print " by 6".
		}

		print _n_.
	}
	const rational := 20 // -6.
	print rational, _n_.

	{
		var hehe := [5].
		const rational := new [[int]](4).
		rational[0]:= new [int](1).
		rational[1]:= new [int](2).
		rational[2]:= hehe.
		rational[3]:= new [int](4).
		hehe := [6].
		release rational[2].
		print "hehe inside 1 : ", rational, _n_.
	}

	{
		const rational := new [[string]](4).
		rational[0]:=["abc"].
		rational[1]:=["def"].
		rational[2]:=["ghi"].
		rational[3]:=["jkl"].
		print "hehe inside 2 : ", rational, _n_.

		const a := rational[0].
		const b := rational[1].
		const c := rational[2].
		const d := rational[3].
		print " pre-release: ", a;b;c;d,_n_.

		release a.
		release b.

		print "about to release", _n_.
		release rational.
		print "post-release: ", a;b;c;d,_n_.

		release c.
		release d.
		print "post-release: ", a;b;c;d,_n_.
		print "a: ", rational,_n_.
	}

	print "hehe outside: ", rational, _n_.

	{
		const arr := [1,2,3,4,5,6,7,8,9].
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.
	}

	{
		const arr := [^1^,^2^,^3^,^4^,^5^,^6^,^7^,^8^,^9^].
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.
	}

	{
		const arr := [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0].
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.
	}

	{
		const arr := [_true_, _false_, _false_, _true_].
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.
	}

	{
		const arr := [1//2, 2//2, 3//2, 4//2, 5//2, 6//2, 7//2, 8//2, 9//2].
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.
	}

	{
		const arr := ["1-str", "2-str", "3-str", "4-str", "5-str", "6-str", "7-str", "8-str", "9-str"].
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.

		release arr.
		print length arr, ":"; arr, _n_.
	}
}
