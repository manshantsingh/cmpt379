func double<rat a> -> rat {
	return a*2.
}

func isEven<int a> -> bool{
	return (a/2)*2 == a.
}

func isOdd<int a> -> bool{
	return (a/2)*2 != a.
}

func willRoundUp<rat a> -> bool{
	return a > [0.5|rat].
}

func makeTuple<rat a, rat b> -> [rat]{
	return [a,b].
}

func maxRational<rat a, rat b> -> rat{
print "a: ",a,"  and b: ",b,_n_.
	if(a>b){return a.}
	return b.
}

func maxRationalAsInt<int a, rat b> -> int{
print "a: ",a,"  and b: ",b,_n_.
	if(a>b){return a.}
	return [b|int].
}

func maxInt<int a, int b> -> int{
print "a: ",a,"  and b: ",b,_n_.
	if(a>b){return a.}
	return b.
}

func maxIntasRational<rat a, int b> -> rat{
print "a: ",a,"  and b: ",b,_n_.
	if(a>b){return a.}
	return b//13.
}

exec{
	var arr := [1//2, 2//3, 100//7, 3//4, 4//5, 5//6].
	var arr2 := [1,5,3,7,100,6,7,3,0,1,56,65].
	# print arr map double, _n_. 
	# print arr reduce willRoundUp, _n_.
	# print zip arr, reverse arr, makeTuple, _n_.

	# print _n_, "full: ", arr2, _n_.
	# print "odds: ", arr2 reduce isOdd, _n_.

	# print _n_, "full: ", arr, _n_.
	# # print "max: ",_n_, arr fold[20//3] maxRational, _n_.
	# print "max: ",_n_, arr fold[8] maxRationalAsInt, _n_.

	print _n_, "full: ", arr2, _n_.
	# print "max: ",_n_, arr2 fold maxInt, _n_.
	print "max: ", _n_, arr2 fold[100//3] maxIntasRational, _n_.
}

# exec{
# 	var a:= "hello world".
# 	var x:= 3.
# 	var y:= 5.
# 	var i:= 0.
# 	print "a: '", a, "' with length: ", length a, _n_, _n_.
# 	while(i < length a){
# 		print i,": ", a, _n_.
# 		i:= i + 1.
# 	}
# 	var b:= a[x,y].
# 	print _n_,_n_,"substring: '", b, "' with length:"; length b, _n_, _n_.
# 	i :=0.
# 	while(i < length b){
# 		print i,": ", b[i], _n_.
# 		i:= i + 1.
# 	}

# 	print a+" vs "+b + ^!^, _n_.
# 	print ^!^ + "another!", _n_.
# 	print "reverse a: '", reverse a, "'", _n_.

# 	var arr := reverse [1//2, 2//3, 3//4].
# 	for index i of arr {
# 		print "i: ",i,"  and arr[i]: ", arr[i], _n_.
# 	}

# 	print _n_, "by val now: ",_n_.
# 	for elem x of arr{
# 		print "x: ", x, _n_.
# 	}

# 	print _n_, "this is the end.", _n_.


# }