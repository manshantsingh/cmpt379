func add<int a, int b> -> int {
	return a+b.
}

func subtract<int a, int b> -> int {
	return a-b.
}

func multiply<int a, int b> -> int {
	return a*b.
}

func divide<int a, int b> -> int {
	return a/b.
}

func lines<int a> -> void {
	var i:=0.
	while(i<a){
		print _n_.
		i:= i + 1.
	}
	return.
}

exec{
	const arr := [add, subtract, multiply, divide].
	const a := 8.
	const b := 4.
	var i:=0.
	while(i < length arr){
		print "operation result: ", arr[i](a,b), _n_.
		i := i + 1.
	}

	var max := <int a, int b> -> int {
		if(a>b){
			return a.
		}
		return b.
	}.
	call lines(2).
	var list := new [<int,int> -> int](6).
	list[0] := add.
	list[1] := subtract.
	list[2] := multiply.
	list[3] := divide.
	list[4] := max.
	list[5] := <int a, int b> -> int {
		# min function
		if(a<b){
			return a.
		}
		return b.
	}.

	i:=0.
	while(i < length list){
		print "operation result: ", list[i](a,b), _n_.
		i := i + 1.
	}

	call lines(2).
	release arr.
	release list.

	const complexFunc := <int a, <int> -> int lambda> -> int {
		return lambda(a).
	}.

	const vector := [
		<int a> -> int {
			print "I just got an ",a,_n_.
			return a.
		},
		<int a> -> int {
			print "this is interesting ",a,_n_.
			return a.
		},
		<int a> -> int {
			print "Double of ",a, " is ", 2*a,_n_.
			return 2*a.
		},
		<int a> -> int {
			if( a == (a/2)*2  ){
				print a," is even", _n_.
				return 0.
			}
			else{
				print a," is odd", _n_.
				return 1.
			}
		}
	].

	i:=0.
	while( i < length vector){
		print complexFunc(5, vector[i]).
		call lines(2).
		i:= i + 1.
	}
}